#!/bin/bash

PID_FILE=/tmp/wildfly.pid

# restore maven dependencies downloaded in a previous build,
# so they do not have to be downloaded again.
# /opt/s2i/destination/artifacts will only be present in the incremental build scenario
# in which the target image name is an existing docker image which contains
# dependencies from a prior build execution.
function restore_saved_artifacts() {
  if [ "$(ls /opt/s2i/destination/artifacts/ 2>/dev/null)" ]; then
    echo -n "Restoring saved artifacts from prior build..."
    mv /opt/s2i/destination/artifacts/* $HOME/.
  fi
}

# Configure the artifact output directory so we can also deal with multi module projects
function get_output_dir() {
  local dir=""

  # If multi module build and no ARTIFACT_DIR is set --> error
  if [ x"${ARTIFACT_DIR}" = x ]; then
    echo " ${MAVEN_ARGS}" | grep -q ' -pl'
    if [ $? -eq 0 ]; then
       echo "ARTIFACT_DIR must be set for multi module Maven builds"
       exit 1
    fi
    dir="${LOCAL_SOURCE_DIR}/target"
  else
    if [ "${ARTIFACT_DIR:0:1}" = "/" ]; then
       echo "ARTIFACT_DIR \"${ARTIFACT_DIR}\" must not be absolute but relative to the source directory"
       exit 1
    fi
    dir="${LOCAL_SOURCE_DIR}/${ARTIFACT_DIR}"
  fi

  # Normalize dir
  dir=$(echo ${dir} | tr -s /)
  dir=${dir%/}
  # The parent must exist but target/ won't exist yet
  if [ ! -d $(dirname "${dir}"}) ]; then
    echo "Please specify an existing build directory ARTIFACT_DIR (tried '$(dirname "${dir}")' which does not exist)"
    exit 1
  fi
  echo ${dir}
}

function setup_maven() {
  if [ -f "${LOCAL_SOURCE_DIR}/configuration/settings.xml" ]; then
    maven_env_args="${maven_env_args} -s ${LOCAL_SOURCE_DIR}/configuration/settings.xml"
    echo "Using custom maven settings from ${LOCAL_SOURCE_DIR}/configuration/settings.xml"
  fi
}

# Return the deployment-scanner configuration
function getscanconfig() {
  count=0
  while [ ${count} -lt 10 ]; do
    scanconfig=`/wildfly/bin/jboss-cli.sh -u=$ADMIN -p=$PASSWORD -c "/subsystem=deployment-scanner/:read-resource(recursive=true)" 2>&1 || :`
    if [[ $scanconfig =~ '"outcome" => "success"' ]] ; then
      SCANCONFIG=$scanconfig
      return
    fi
    let count+=1

    sleep 2
  done
}

# Verify that the deployment scanner has finished running
function waitondeployments() {
  if ! ismgmtup; then
    echo "Timed out waiting for management listening port"
    echo "Could not connect to JBoss management interface, skipping deployment verification"
  else
    SCANCONFIG=""
    c=0
    while [ "$SCANCONFIG" == "" ] && [ $c -lt 5 ]; do
      getscanconfig
      if [ "$SCANCONFIG" != "" ]; then
        break
      fi
      sleep 2
      let c=c+1
    done

    if [ "$SCANCONFIG" == "" ]; then
      echo "Could not connect to JBoss management interface, skipping deployment verification"
    elif [[ $SCANCONFIG =~ '"scan-enabled" => true' ]]; then
      DEPLOYMENTS_DIR=/wildfly/standalone/deployments
      pushd $DEPLOYMENTS_DIR

      artifacts=()

      while read -r -d $'\0'; do
        artifacts+=("$REPLY")
      done < <(find . -iregex '.*\.\([ejrsw]ar\|zip\)$' -print0)

      deployexploded=false
      if [[ $SCANCONFIG =~ '"auto-deploy-exploded" => true' ]]; then
        deployexploded=true
      fi
      deployarchive=false
      if [[ $SCANCONFIG =~ '"auto-deploy-zipped" => true' ]]; then
        deployarchive=true
      fi

      artifactsdeployed=()
      artifactsfailed=()
      artifactsskipped=()
      artifactsunknown=()
      for artifact in ${artifacts[*]}; do
        if ( [ -f $artifact ] && $deployarchive ) || ( [ -d $artifact ] && $deployexploded ); then
          # TODO triple check this logic, add a timeout
          while [[ -f ${artifact}.isdeploying || -f ${artifact}.pending ]]; do
            echo "Artifact: ${artifact} is still deploying"
            sleep 10
          done

          if [ -f ${artifact}.deployed ]; then
            artifactsdeployed+=($artifact)
          elif [ -f ${artifact}.failed ]; then
            artifactsfailed+=($artifact)
          else
            artifactsunknown+=($artifact)
          fi

        else
          # artifact skipped because of deployment scanner config
          artifactsskipped+=($artifact)
        fi
      done

      popd

      if [ ${#artifactsskipped[@]} -gt 0 ]; then
        echo "Artifacts skipped because of deployment-scanner configuration: ${artifactsskipped[*]}"
      fi

      if [ ${#artifactsfailed[@]} -gt 0 ]; then
        echo "Failed deployments: ${artifactsfailed[*]}"
        return 1
      fi

      if [ ${#artifactsdeployed[@]} -gt 0 ]; then
        echo "Artifacts deployed: ${artifactsdeployed[*]}"
      fi

      if [ ${#artifactsunknown[@]} -gt 0 ]; then
        echo "Artifacts in an unknown state: ${artifactsunknown[*]}"
      fi
    else
      echo "Deployment scanner disabled, skipping deployment verification"
    fi
  fi
}

# Check if the server http port is up
function ishttpup() {
  count=0
  while [ ${count} -lt 64 ]
  do
    if ! curl --head --silent --fail --location --max-time 2 "0.0.0.0:8080" > /dev/null; then
      echo "Found 0.0.0.0:8080 listening port"
      return 0
    fi

    # if the process failed to start, error out immediately
    # rather than waiting for the timeout on the port being available.
    pid=$(cat $PID_FILE);
    if ! ps | grep -v grep | grep $pid > /dev/null; then
      return 2
    fi

    let count=${count}+1
  done

  return 1
}

# Check if the server mgmt port is up
function ismgmtup() {
  if ! curl --head --silent --fail --location --max-time 16 "0.0.0.0:9990" > /dev/null; then
    echo "Found 0.0.0.0:9990 listening port"
    return 0
  fi

  return 1
}

ADMIN=admin
PASSWORD=passw0rd_

# Source code provided to S2I is at ${HOME}
LOCAL_SOURCE_DIR=${HOME}
mkdir -p $LOCAL_SOURCE_DIR

# Resulting WAR files will be deployed to /wildfly/standalone/deployments
DEPLOY_DIR=/wildfly/standalone/deployments
mkdir -p $DEPLOY_DIR

# Copy the source for compilation
cp -Rf /opt/s2i/destination/src/. $LOCAL_SOURCE_DIR
chgrp -R 0 $LOCAL_SOURCE_DIR
chmod -R g+rw $LOCAL_SOURCE_DIR

# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$LOCAL_SOURCE_DIR/pom.xml" ]; then
  # restore any maven dependencies which will be present if this is an
  # incremental build
  restore_saved_artifacts

  pushd $LOCAL_SOURCE_DIR &> /dev/null

  if [ -z "$MAVEN_ARGS" ]; then
    export MAVEN_ARGS="package -Popenshift -DskipTests"
  fi
  if [ -f "$LOCAL_SOURCE_DIR/configuration/settings.xml" ]; then
	export MAVEN_ARGS="$MAVEN_ARGS -s $LOCAL_SOURCE_DIR/configuration/settings.xml"
  fi
  if [ -z "$MAVEN_ARGS_APPEND" ]; then
    export MAVEN_ARGS="$MAVEN_ARGS $MAVEN_ARGS_APPEND"
  fi
  echo "Found pom.xml... attempting to build with 'mvn ${MAVEN_ARGS}'"

  mvn --version
  mvn $MAVEN_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from mvn package"
    exit $ERR
  fi

  echo "Copying built war files into $DEPLOY_DIR for later deployment..."
  popd &> /dev/null
else
  echo "Copying binaries in source directory into $DEPLOY_DIR for later deployment..."
fi

build_dir=$(get_output_dir)

if [ -d ${build_dir} ]; then
  cp ${build_dir}/*.war $DEPLOY_DIR >& /dev/null
  chgrp -R 0 $DEPLOY_DIR
  chmod -R g+rw $DEPLOY_DIR
fi

if [ -d $LOCAL_SOURCE_DIR/deployments ]; then
  echo "Copying additional deployment files from project..."
  cp $LOCAL_SOURCE_DIR/deployments/* $DEPLOY_DIR >& /dev/null
  chgrp -R 0 $DEPLOY_DIR
  chmod -R g+rw $DEPLOY_DIR
fi

if [ -d $LOCAL_SOURCE_DIR/cfg ]; then
  echo "Copying config files from project..."
  cp cfg/* /wildfly/standalone/configuration
  chgrp -R 0 /wildfly/standalone/configuration
  chmod -R g+rw /wildfly/standalone/configuration
fi

if [ -d $LOCAL_SOURCE_DIR/modules ]; then
  echo "Copying modules from project..."
  mkdir /wildfly/provided_modules
  cp -r modules/* /wildfly/provided_modules
  chgrp -R 0 /wildfly/provided_modules
  chmod -R g+rw /wildfly/provided_modules
fi
echo "...done"

exit $rc
