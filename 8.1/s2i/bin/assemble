#!/usr/bin/env bash

set -e

PID_FILE=/tmp/wildfly.pid

# restore maven dependencies downloaded in a previous build,
# so they do not have to be downloaded again.
# /opt/s2i/destination/artifacts will only be present in the incremental build scenario
# in which the target image name is an existing docker image which contains
# dependencies from a prior build execution.
function restore_saved_artifacts() {
  if [ "$(ls /opt/s2i/destination/artifacts/ 2>/dev/null)" ]; then
    echo -n "Restoring saved artifacts from prior build..."
    mv /opt/s2i/destination/artifacts/* $LOCAL_SOURCE_DIR/.
  fi
}

# Configure the artifact output directory so we can also deal with multi module projects
function get_output_dir() {
  local dir=""

  # If multi module build and no ARTIFACT_DIR is set --> error
  if [ x"${ARTIFACT_DIR}" = x ]; then
    echo " ${MAVEN_ARGS}" | grep -q ' -pl'
    if [ $? -eq 0 ]; then
       echo "ARTIFACT_DIR must be set for multi module Maven builds"
       exit 1
    fi
    dir="${LOCAL_SOURCE_DIR}/target"
  else
    if [ "${ARTIFACT_DIR:0:1}" = "/" ]; then
       echo "ARTIFACT_DIR \"${ARTIFACT_DIR}\" must not be absolute but relative to the source directory"
       exit 1
    fi
    dir="${LOCAL_SOURCE_DIR}/${ARTIFACT_DIR}"
  fi

  # Normalize dir
  dir=$(echo ${dir} | tr -s /)
  dir=${dir%/}
  # The parent must exist but target/ won't exist yet
  if [ ! -d $(dirname "${dir}"}) ]; then
    echo "Please specify an existing build directory ARTIFACT_DIR (tried '$(dirname "${dir}")' which does not exist)"
    exit 1
  fi
  echo ${dir}
}

# Source code provided to S2I is at /tmp/src
LOCAL_SOURCE_DIR=/tmp/src
mkdir -p $LOCAL_SOURCE_DIR

cd $LOCAL_SOURCE_DIR

# Resulting WAR files will be deployed to /wildfly/standalone/deployments
DEPLOY_DIR=/wildfly/standalone/deployments
mkdir -p $DEPLOY_DIR

# Copy the source for compilation
cp -Rf /opt/s2i/destination/src/. $LOCAL_SOURCE_DIR
chgrp -R 0 $LOCAL_SOURCE_DIR
chmod -R g+rw $LOCAL_SOURCE_DIR

# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$LOCAL_SOURCE_DIR/pom.xml" ]; then
  # restore any maven dependencies which will be present if this is an
  # incremental build
  restore_saved_artifacts

  pushd $LOCAL_SOURCE_DIR &> /dev/null

  if [ -z "$MAVEN_ARGS" ]; then
    export MAVEN_ARGS="package -Popenshift -DskipTests"
  fi
  if [ -f "$LOCAL_SOURCE_DIR/configuration/settings.xml" ]; then
	export MAVEN_ARGS="$MAVEN_ARGS -s $LOCAL_SOURCE_DIR/configuration/settings.xml"
  fi
  if [ -z "$MAVEN_ARGS_APPEND" ]; then
    export MAVEN_ARGS="$MAVEN_ARGS $MAVEN_ARGS_APPEND"
  fi
  echo "Found pom.xml... attempting to build with 'mvn ${MAVEN_ARGS}'"

  mvn --version
  mvn $MAVEN_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from mvn package"
    exit $ERR
  fi

  echo "Copying built war files into $DEPLOY_DIR for later deployment..."
  popd &> /dev/null
else
  echo "Copying binaries in source directory into $DEPLOY_DIR for later deployment..."
fi

build_dir=$(get_output_dir)

if [ -d ${build_dir} ]; then
  cp ${build_dir}/*.war $DEPLOY_DIR >& /dev/null
  chgrp -R 0 $DEPLOY_DIR
  chmod -R g+rw $DEPLOY_DIR
fi

if [ -d $LOCAL_SOURCE_DIR/deployments ]; then
  echo "Copying additional deployment files from project..."
  cp $LOCAL_SOURCE_DIR/deployments/* $DEPLOY_DIR >& /dev/null
  chgrp -R 0 $DEPLOY_DIR
  chmod -R g+rw $DEPLOY_DIR
fi

if [ -d $LOCAL_SOURCE_DIR/cfg ]; then
  echo "Copying config files from project..."
  cp $LOCAL_SOURCE_DIR/cfg/* /wildfly/standalone/configuration
  chgrp -R 0 /wildfly/standalone/configuration
  chmod -R g+rw /wildfly/standalone/configuration
fi

if [ -d $LOCAL_SOURCE_DIR/modules ]; then
  echo "Copying modules from project..."
  mkdir /wildfly/provided_modules
  cp -r $LOCAL_SOURCE_DIR/modules/* /wildfly/provided_modules
  chgrp -R 0 /wildfly/provided_modules
  chmod -R g+rw /wildfly/provided_modules
fi
echo "...done"

exit $rc
